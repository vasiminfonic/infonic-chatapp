let jwt,joi,JWTSTRING,SERVER_Path,customErrorHandler,User,fs;_4f6‍.x([["default",()=>_4f6‍.o]]);_4f6‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);_4f6‍.w("joi",[["default",["joi"],function(v){joi=v}]]);_4f6‍.w("../../config",[["JWTSTRING",["JWTSTRING"],function(v){JWTSTRING=v}],["SERVER_Path",["SERVER_Path"],function(v){SERVER_Path=v}]]);_4f6‍.w("../../errorHandler",[["customErrorHandler",["customErrorHandler"],function(v){customErrorHandler=v}]]);_4f6‍.w("../../models/user",[["default",["User"],function(v){User=v}]]);_4f6‍.w("fs",[["default",["fs"],function(v){fs=v}]]);








const userController = {

    async getUsers(req, res, next) {
        const { page, row } = req.query;
        const limit = +(row ? (row < 10 ? 10 : row) : 10);
        const skip = +(page < 0 ? 0 : (limit * page));
        try {
            const total = await User.countDocuments({ role: { $ne: 'admin' } });
            if (!total) {
                return next(customErrorHandler.wrongCredentials())
            }
            const users = await User.find({ role: { $ne: 'admin' } }, '-password -updatedAt -__v ', { limit, skip });
            if (!users) {
                return next(customErrorHandler.wrongCredentials())
            }
            res.status(200).json({ data: users, total });
        } catch (err) {
            return next(customErrorHandler.serverError(err));
        }
    },
    async getUser(req, res, next) {
        const { authorization } = req.headers;
        if (authorization) {
            const token = authorization.split(' ')[1]

            try {
                const { data: { _id } = {} } = jwt.verify(token, JWTSTRING)
                _4f6‍.g.console.log(_id);
                if(!_id){
                    return next(customErrorHandler.serverError());
                }
                const user = await User.findOne({ _id }, '-password -updatedAt -__v ');
                if (!user) {
                    return next(customErrorHandler.wrongCredentials())
                }
                res.status(200).json({ data: user });
            } catch (err) {
                return next(customErrorHandler.serverError(err));
            }

        }

    },

    async getAdmin(req, res, next) {
        try {
            const admin = await User.findOne({ role: 'admin' }, '-password -updatedAt -__v ');
            if (!admin) {
                return next(customErrorHandler.wrongCredentials())
            }
            res.status(200).json({ data: admin });
        } catch (err) {
            return next(customErrorHandler.serverError(err));
        }
    },

    async getUserSearch(req, res, next) {
        const { search } = req.params
        try {
            const data = await User.find({ $and: [{ name: { $regex: search, $options: "i" } }, { role: { $ne: 'admin' } }] }, '-password -updatedAt -__v ');
            if (!data) {
                return next(customErrorHandler.wrongCredentials());
            }
            res.status(200).json({ data });
        } catch (err) {
            return next(customErrorHandler.serverError(err));
        }
    },
    async getUserMessages(req, res, next) {
        const { id } = req.params;
        try {
            // const data = await User.find()
            const userMessage = await User.aggregate([
                { $match: { role: { $ne: 'admin' } } },
                {
                    $lookup: {
                        from: 'messages',
                        // localField: '_id',
                        // foreignField: 'sender',
                        let: { id: '$_id', img: '$image' },
                        as: 'messages',
                        pipeline: [
                            {
                                $match: {
                                    $expr: {
                                        $and: [
                                            { $eq: ["$seen", false] },
                                            { $eq: ['$$id', '$sender'] }
                                        ]
                                    }

                                },
                            }
                        ]

                    }
                },
                {
                    $addFields: {
                        "unseenMessages": { $size: "$messages" },
                        'image': { $concat: [SERVER_Path, '/', '$image'] },
                    }
                },
                {
                    $project: {
                        _id: 1,
                        name: 1,
                        unseenMessages: 1,
                        image: 1
                    }
                }

            ])
            if (!userMessage) {
                return next(customErrorHandler.emptyData());
            }
            res.status(200).json({ data: userMessage })

        } catch (err) {
            _4f6‍.g.console.log(err);
            return next(customErrorHandler.serverError(err))
        }
    },
    async updateUser(req, res, next) {
        const { id } = req.params
        const { name, password, phone, country } = req.body;
        let image
        if (req.file) {
            image = req.file.path;
        }

        try {
            
            const { error } = joi.object({
                name: joi.string().allow(null, ''),
                phone: joi.string().allow(null, ''),
                country: joi.string().allow(null,''),
                password: joi.string().allow(null,''),
                image: joi.string().allow(null,'')
            }).validate(req.body);
            if (error) {
                if (image) {
                    fs.unlink(`${appRoot}/${image}`, (err) => {
                        if (err) {
                            return next(
                                customErrorHandler.serverError(err.message)
                            );
                        }
                    });
                }
                return next(error);
            }
            if(!id){
                if (image) {
                    fs.unlink(`${appRoot}/${image}`, (err) => {
                        if (err) {
                            return next(
                                customErrorHandler.serverError(err.message)
                            );
                        }
                    });
                }
                return next(customErrorHandler.wrongCredentials())
            }
            const user = await User.findByIdAndUpdate(id , {
                ...(name && { name }),
                ...(image && { image }),
                ...(country && { country }),
                ...(phone && { phone }),
                ...(password && { password })
            },
                { new: true, runValidators: true }).select('name email country phone image')
            if (!user) {
                return next(customErrorHandler.emptyData());
            }
            res.status(200).json({ message: 'Updated Successfully', data: user });

        } catch (err) {
            if (image) {
                fs.unlink(`${appRoot}/${image}`, (err) => {
                    if (err) {
                        return next(
                            customErrorHandler.serverError(err.message)
                        );
                    }
                });
            }
            _4f6‍.g.console.log(err);
            return next(customErrorHandler.serverError(err));
        }
    },


}

_4f6‍.d(userController);  