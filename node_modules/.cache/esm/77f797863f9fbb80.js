let MainOrder,customErrorHandler,User,crypto;_3f9‍.x([["default",()=>_3f9‍.o]]);_3f9‍.w("../../models/mainOrder",[["default",["MainOrder"],function(v){MainOrder=v}]]);_3f9‍.w("../../errorHandler",[["customErrorHandler",["customErrorHandler"],function(v){customErrorHandler=v}]]);_3f9‍.w("../../models/user",[["default",["User"],function(v){User=v}]]);_3f9‍.w("crypto",[["default",["crypto"],function(v){crypto=v}]]);




const mainOrderController = {
    async addOrder(req, res, next) {
        try {
            const {
                name,
                email,
                paperType,
                paperLength,
                education,
                referencing,
                subject,
                question,
                deadline,
                country,
            } = req.body;
            let user;
            try {
                user = await User.findOne({ email })
                if (!user) {
                    const password = crypto.randomBytes(5).toString('hex');
                    user = await User.create({
                        name,
                        email,
                        password
                    })
                }
            } catch (err) {
                return next(customErrorHandler.serverError())
            }
            const filesUrl = req.files.map(e => e.path)
            const order = await MainOrder.create({
                userId: user._id,
                paperType,
                paperLength,
                education,
                referencing,
                subject,
                question,
                deadline,
                country,
                ...(filesUrl.length && { files: filesUrl })
            })
            if (!order) {
                return next(customErrorHandler.emptyData())
            }
            res.status(200).json({ message: 'Order Created SuccessFully', data: order })
        } catch (e) {
            next(customErrorHandler.serverError(e))
        }

    },
    async getOrders(req, res, next) {
        try {
            const orders = await MainOrder.find({}, null, {
                limit: 10,
                sort: {
                    createdAt: -1
                }
            }).populate('userId', 'name email')
            if (!orders) {
                return next(customErrorHandler.emptyData());
            }
            res.status(200).json({ data: orders })
        } catch (error) {
            _3f9‍.g.console.log(error);
        }
    },
    async getOrderById(req, res, next) {
        const { id } = req.params
        try {
            const order = await MainOrder.findById(id).populate('userId', 'name email')
            if (!order) {
                return next(customErrorHandler.emptyData());
            }
            res.status(200).json({ data: order })
        } catch (error) {
            return next(customErrorHandler.serverError())
         
        }
    },
    async getOrdersofUser(req, res, next) {
        const { id } = req.params
        try {
            const order = await MainOrder.find({userId: id})
            if (!order) {
                return next(customErrorHandler.emptyData());
            }
            res.status(200).json({ data: order })
        } catch (error) {
            return next(customErrorHandler.serverError())
         
        }
    }
}
_3f9‍.d(mainOrderController);